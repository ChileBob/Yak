#!/usr/bin/perl
#
# yak-cli : Yak command line client
#
# MIT License (ChileBob)
#
# Zcash : zs1a7qnkg8hr74ujj08jhjcdfs7s62yathqlyn5vd2e8ww96ln28m3t2jkxun5fp7hxjntcg8ccuvs
# Ycash : ys17fsj64ydl93net807xr00ujz2lnrf22cjf4430vvz69vpaat8t3hrdjmkvj7thrw4fdaz7l0pns

# TODO: Status display
# TODO: Show remote node status
# TODO: Show registered viewkeys, fees paid & status
# TODO: show help, command line args & exit

use Data::Dumper;										# debugging output

my $config = { 											# DEFAULT CONFIGURATION
	auth    => 'changethispassword',							# password to bypass yak-yak rate limit
	web 	=> 'ws://127.0.0.1:8834',							# websocket server 
	uri     => '',										# URL to post transaction
	keys    => './yak-cli.keys',								# filename for viewkey storage
	debug => 5										# debug verbosity
};

use Time::HiRes q(usleep);									# high res timer
use IO::Socket::INET;										# general purpose networking
use Protocol::WebSocket::Client;								# websocket client
use Convert::Base64;										# transport encoding for perl clients

use Cwd qw(abs_path);										# get install/working directory
use File::Basename;
our $install = dirname(abs_path($0));			

require "$install/modules/common.pm";								# common yak subs
require "$install/modules/bech32.pm";								# bech32 encode/decode 
require "$install/modules/aes256.pm";								# AES256 encrypt/decrypt
require "$install/modules/packet.pm";								# yak packet encode/decode

$config->{'ident'} = aes256::keyRandom(32, 'A'),						# create a new random client ident

$config = common::parse_argv($config, \@ARGV); 							# process command line, overrides default config

my @viewkeys;											# monitored viewkeys

open my $handle, '<', $config->{'keys'};							# load viewkeys
while (my $line = <$handle>) {
	if ($key = common::xfvk_check($line)) {
		push @viewkeys, $key;
	}
}
close ($handle);
common::debug (0, "KEY: Loaded " . scalar @viewkeys . " viewkeys from yak-cli.keys");

#########################################################################################################################################################################
#
# CHANGING ANYTHING BELOW THIS LINE IS A REALLY BAD IDEA !! IF YOU BREAK IT, YOU GET TO KEEP THE PEICES
#
#########################################################################################################################################################################

my $running = 1;										# running flag

my @txid;											# array of txids waiting for confirmation
my $txn;											# hash of transactions



my ($web_type, $web_ip, $web_port) = common::uri_split($config->{'web'});			# break websocket uri into components

while ($running >= 0) {

	my $tcp_socket = IO::Socket::INET->new(								# connect to websocket server (blocking)
		PeerAddr => $web_ip,									#
		PeerPort => $web_port,									#
		Proto => 'tcp',										#
		Blocking => 1										# can be blocking, all we do is send
	);

	if (!$tcp_socket) {										# confirm connection
		my $delay = int rand(30) + 5;
		common::debug (0, "WEB: $config->{'web'} : Failed to reconnect!!! Trying again in $delay seconds");
		sleep($delay);
	}
	else {
		if ($running == 0) {
			common::debug (0, "Reconnected");
			$running = 1;									# reset runtime flag
		}
							
		my $client = Protocol::WebSocket::Client->new(url => "$config->{'web'}");		# new websocket client

		$client->on(											# websocket connect 
			connect => sub {
				my $client = shift;
			}
		);
	
		$client->on(
			write => sub {										# websocket write
				my $client = shift;
				my ($buf) = @_;
				syswrite $tcp_socket, $buf;
			}
		);
	
		$client->on(											# websocket read
			read => sub {
		
				my $client = shift;
				my ($buf) = @_;
		
				if ($buf =~ m/^HELLO/) {							# server always says 'Hi'
					common::debug(0, "Connected!");
				}
				else {
		
					my $packet = packet::parse(decode_base64($buf), \@viewkeys);	
		
					if ( ($packet->{'type'} == $packet::PKT_ZEC_TRANSPARENT) || ($packet->{'type'} == $packet::PKT_YEC_TRANSPARENT) ) {
						common::debug(0, 'TRANSPARENT NOTIFICATION');
						print Dumper $packet;
					}
		
					elsif ( ($packet->{'type'} == $packet::PKT_ZEC_SHIELDED) || ($packet->{'type'} == $packet::PKT_YEC_SHIELDED) ) {
		
						if (!exists $txn->{$packet->{'txid'}}) {			# avoid duplicates
		
							common::debug(0, "SHIELDED NOTIFICATION : $packet->{'txid'}");
		
							my $note = $packet->{'plaintext'}[0];			# only ever ONE output
		
							push @txid, $packet->{'txid'};				# store txid
		
							$txn->{$packet->{'txid'}} = {				# store txn
								value => $note->{'value'}, 
								memo => $note->{'memo'}, 
								coin => $packet->{'coin'}, 
								conf => 0
							};
														# trigger website & send data
														
							common::website_post($config->{'uri'}, { txid => $packet->{'txid'}, value => $note->{'value'}, memo => $note->{'memo'}, coin => $packet->{'coin'}, conf => 0 } );
		
							print Dumper $txn->{$packet->{'txid'}};			# display transaction
						}
		
					}
		
					elsif ($packet->{'type'} == $packet::PKT_CONFIRMATION) {
		
						TXID: foreach my $tx (@{$packet->{'data'}}) {			# loop through txids in the packet
		
							if ( grep { /$tx/ } @txid ) {				# search our txids
		
								$txn->{$tx}->{'conf'} = 1;			# update confirmation
		
								common::debug(0, "CONFIRMATION : $tx");		# report confirmation
								print Dumper $txn->{$tx};
		
								common::website_post($config->{'uri'}, { txid => $tx, value => $txn->{$tx}->{'value'}, memo => $txn->{$tx}->{'memo'}, coin => $txn->{$tx}->{'coin'}, conf => 1 } );
								
								last TXID;
							}
						}
					}
		
					elsif ($packet->{'type'} == $packet::PKT_BROADCAST) {
						common::debug(0, "BROADCAST");
						print Dumper $packet;
					}
		
					elsif ($packet->{'type'} == $packet::PKT_HEARTBEAT) {
						common::debug(0, 'HEARTBEART');
					}
		
					elsif ($packet->{'type'} == $packet::PKT_ENCRYPTED) {
						common::debug(0, 'ENCRYPTED');
					}
		
					else {
						print "Unknown : " . unpack("H*", decode_base64($buf)) . "\n";
					}
				}
			}
		);
	
		$client->connect;										# connect to websocket server
		sleep(2);											# yak-yak needs a little time
	
		$client->write("BASE64:$config->{'ident'}:$config->{'auth'}");					# subscribe for BASE64 transport, send ident & auth
	
		while ($running) {
	
			if ($tcp_socket) {									# listen to websocket server (if connected)
		
				my $recv_data;									# read from websocket
				my $bytes_read = sysread $tcp_socket, $recv_data, 16384;			# make sure its correct
			
				if (!defined $bytes_read) { 
					common::debug(0, "Failed to read from socket, aborting.");
					$running = 0;
				}
				elsif ($bytes_read == 0) { 
					common::debug(0, "Websocket connection terminated.");
					$running = 0;
				}
				$client->read($recv_data); 							# this is where we parse what we read....
			}
			usleep 100_00;										# lets not beat up the server, take a nap
		}
	}
	common::debug(0, "Reconnecting...");								# reconnect to websocket server
}

exit;

