#!/usr/bin/perl
#
# yak-yec : node client for ycash
#
# MIT License (ChileBob)
#
# Zcash : zs1a7qnkg8hr74ujj08jhjcdfs7s62yathqlyn5vd2e8ww96ln28m3t2jkxun5fp7hxjntcg8ccuvs
# Ycash : ys17fsj64ydl93net807xr00ujz2lnrf22cjf4430vvz69vpaat8t3hrdjmkvj7thrw4fdaz7l0pns

#########################################################################################################################################################################
#
# HEALTH WARNING !!!! Running ZMQ on a fullnode has security implications, make sure you understand them !!!!
#
#########################################################################################################################################################################

my $config = {																# DEFAULT CONFIGURATION

	nodename    => 'ChileBob (YCASH)',												# name/message for announcements
	client_type => 'yak-yec',													# client type
	client_key  => 'changethiskey',													# client encryption key, to send notifications
	web => 'ws://127.0.0.1:8834',													# websocket server
	pool_port => 3333,														# mining pool port number
	pool_fee => 0.5,														# pool fee (percentage)
	pool_yaddr => "ys1y4ewqg6yuk67exdxy94032wwkyerwu0j3qp833xmmedusxluru8cly0ajvm9063k95y77j75yce",					# pool yaddr
	timer => 60,															# interval timer
	debug => 5,															# debugging output level
#	librust => 'ycash/target/debug/librustycash.so',										# path to librustzcash.so (dynamic library built from librustzcash)
#	viewkeyfee => 1000,														# viewkey monitoring fee (Yatoshis per block)
};

#########################################################################################################################################################################
#
# CHANGING ANYTHING BELOW THIS LINE IS A REALLY BAD IDEA !! 
#
#########################################################################################################################################################################

our $node_client = 'ycash-cli';														# fullnode command line client

$SIG{INT} = \&shutdown;															# graceful shutdown

use Data::Dumper;															# debugging

use ZMQ::FFI qw(ZMQ_SUB);														# ZMQ connection to fullnode
use Time::HiRes q(usleep);														# ZMQ polling interval timer
use IO::Socket::INET;															# general purpose networking
use Protocol::WebSocket::Client;													# websocket client

use Cwd qw(abs_path);														
use File::Basename;

our $install = dirname(abs_path($0));													# get install/working directory at runtime

require "$install/modules/common.pm";													# common subs
require "$install/modules/bech32.pm";													# bech32 encode/decode 
require "$install/modules/aes256.pm";													# AES256 encrypt/decrypt
require "$install/modules/packet.pm";													# yak packet generation/parsing
require "$install/modules/blake2b.pm";													# needed by mining.pm
require "$install/modules/mining.pm";													# mining
require "$install/modules/stratum.pm";													# stratum server
require "$install/modules/librust.pm";													# FFI subs to use rust libraries
require "$install/modules/payout.pm";													# pool payout 

my $running = 0;															# runtime flag (0 = exit, 1 = running, 2 = shutting down)

my @notifications = ( $packet::PKT_YEC_SHIELDED, $packet::PKT_CONFIRMATION, $packet::PKT_YEC_TRANSPARENT);				# packet types we deliver, remove from array to disable

$config = common::parse_argv($config, \@ARGV);												# modify config from command line args

our $key = $config->{'client_key'};													# yak-yak encryption key, shared with modules

if ($key eq 'changethiskey') {														# using the default key?? bad puppy !! 
	common::debug(0, "\nWARNING!!! YOU MUST CHANGE THE WEBSOCKET ENCRYPTION KEY !!!");
}

my $node_config = common::config_load("$ENV{'HOME'}/.ycash/ycash.conf");								# load node config

if ($node_config->{'testnet'} && $config->{'librust'}) {										# disable payment detection for testnet
	common::debug(0, "\nWARNING!!! PAYMENT DETECTION DISABLED (TESTNET) !!!");
	delete($config->{'librust'});
}

my $info  = common::node_cli('getblockchaininfo', '', '');										# attempt node RPC connection

while ( ($info->{'blocks'} != $info->{'headers'} ) || !exists($info->{'blocks'}) ) {							# delay until node is synced

	common::debug(0, "\nWaiting for node sync...");
	sleep(30);
	$info  = common::node_cli('getblockchaininfo', '', '');										# reload chain info
}

my $block = common::node_cli('getblock', $info->{'bestblockhash'}, 'abort');								# load last block, abort if node is down

if ( ($node_config->{'mineraddress'} || $config->{'librust'}) && ($node_config->{'zmqpubrawtx'} ne $node_config->{'zmqpubhashblock'} )) {

	common::debug(0, "\nBad configuration, 'zmqpubhashblock' and 'zmqpubrawtx' MUST use the same port, update ycash.conf\n");
	exit(1);
}

if ($config->{'librust'}) {														# we're configured for payment detection

	if ( !exists($node_config->{'zmqpubrawtx'}) ) {											# ZMQ : transaction notifications needed
		common::debug(0, "\nShielded payment detection requires 'zmqpubrawtx' to be configured in ycash.conf\n");
		exit(1);
	}
	librust::init( "$install/rust/$config->{'librust'}" );								
	$running = 1;
}

if ($node_config->{'mineraddress'}) {													# we're configured for mining	

	if (!exists($node_config->{'zmqpubhashblock'}) ) {										# ZMQ : block notifications needed
		common::debug(0, "\nStratum mining pool server requires 'zmqpubhashblock' to be configured in ycash.conf");
		exit(1);
	}

	common::debug(0, "\nMINING POOL ENABLED :-\n\n- Pool Addr : $node_config->{'mineraddress'}\n- Pool Port : $config->{'pool_port'}\n- Dev Fee   : $stratum::devfee_percent\%");
	stratum::start($config->{'pool_port'}, $node_config->{'mineraddress'}, $config->{'pool_fee'});					# open listening port
	$running = 1;
}

if (!$running) {															# make sure something was configured

	common::debug(0, "\nPlease configure for pool mining, shielded payment detection, or both !\n");
	exit;
}

our $monitored;																# hash of monitored viewkeys

our @viewkey;																# client viewkeys with active monitoring

my @packet;																# outbound packet buffer

my $timer = time;															# interval timer count

my @keys = common::keys_load('yak-yec.keys');												# load viewkeys

$config->{'xfvk'} = common::xfvk_check($keys[0]);											# first key is for registration, make sure its valid !


if ($config->{'xfvk'} && $config->{'librust'}) {    											# 

	$config->{'addr'} = librust::xfvk_to_addr($config->{'xfvk'});									# derive address
	$config->{'ivk'}  = librust::xfvk_to_ivk($config->{'xfvk'});									# derive ivk
	$monitored->{$config->{'xfvk'}}->{'expiry'} = -1;										# add to monitoring, no expiry block

	common::debug(0, "\nPAYMENT DETECTION ENABLED :-\n\n- Addr : $config->{'addr'}\n- Fee  : $config->{'viewkeyfee'} yoshis/block\n- IVK  : $config->{'ivk'}\n");

	my $txn_reg = common::node_cli("z_listreceivedbyaddress $config->{'addr'}");							# CLIENT VIEWKEY REGISTRATION

	if (!$txn_reg) {														#
		common::debug(0, "\nThe registration zaddr (or viewkey) is not in the node wallet!! Aborting!!");			#
		common::debug(0, "\nImport the IVK (incoming viewkey) to the fullnode and try again.");					#
		exit(1);														#
	}																#
																	#
	foreach my $txn ( @{$txn_reg} ) {												# 
																	#
		my $txn_detail = common::node_cli("gettransaction", $txn->{'txid'}, '');						# get transaction detail
		my $txn_block  = common::node_cli("getblock", $txn_detail->{'blockhash'}, '');						# get block transaction was mined in
																	#
		if (my $xfvk = common::memo_to_xfvk($txn->{'memo'})) {									# add keys to monitoring
			@viewkey = common::xfvk_monitor($xfvk, ($txn->{'amount'} * 100000000), $txn_block->{'height'}, $block->{'height'});
		}															
	}															
	print "Loaded " . scalar @viewkey . " client viewkey(s)\n";							
}


my $ctx = ZMQ::FFI->new();														# ZMQ CONNECTION
my $zmq_socket = $ctx->socket(ZMQ_SUB);													 
$zmq_socket->connect($node_config->{'zmqpubrawtx'});													 
$zmq_socket->subscribe('');							 

stratum::new_work();															# put miners to work

#payout::load_shares($block);														# kick payment module
#exit;

common::debug(0, "Connecting to socket server : $config->{'web'}\n");

my ($web_type, $web_ip, $web_port) = common::uri_split($config->{'web'});								# WEBSOCKET CLIENT

while ($running >= 0) {

	my $tcp_socket = IO::Socket::INET->new(												# connect to websocket
		PeerAddr => $web_ip,													#
		PeerPort => $web_port,													#
		Proto => 'tcp',														#
		Blocking => 1,														#
		Timeout => 1														# one-second timeout, doesn't block
	);

	if (!$tcp_socket) {														# not connected, delay before retrying
		my $delay = int rand(5) + 5;												 
		common::debug (0, "WEB: $config->{'web'} : Failed to reconnect!! Trying again in $delay seconds");
		sleep($delay);
	}
	else {																# successful reconnection
		if ($running == 0) {
			common::debug(0, "Reconnected");
			$running = 1;
		}

		my $client = Protocol::WebSocket::Client->new(url => "$config->{'web'}");						# setup websocket client

		$client->on(														# connect method
			connect => sub {
				my $client = shift;
				sleep(2);												# little setup time here helps
    			}
		);
	
		$client->on(
			write => sub {													# write method
				my $client = shift;
				my ($buf) = @_;
				syswrite $tcp_socket, $buf;
			}
		);
	
		$client->on(														# read method
			read => sub {
				my $client = shift;
				my ($buf) = @_;
	
				if ($buf =~ m/^HELLO/) {										# server welcome message
					common::debug($config->{'debug'}, "Connected!");
				}
				else {													# ignore server responses 'cos we just dont care
					if ($buf ne 'OK') {											
						
						# TODO : Watch for requests here
						#
						# TODO: Websocket mining clients will appear here...
						# print "$buf\n";
					}
				}
			}
		);
	
		$client->connect;													# start websocket client

		$client->write("BASE64:$config->{'client_type'}");									# subscribe for BASE64 transport & send type
	
		while ($running) {
   			 
			if ($tcp_socket) {												# confirm connection is up

				DELIVER: if (scalar @packet > 0) {									# send oldest packet
	
					$client->write($packet[0]);
					@packet = splice(@packet, 1);
	
					usleep 100_00;											# short nap, be nice to the server
	
					my $recv_data;											# read from websocket
					my $bytes_read = sysread $tcp_socket, $recv_data, 16384;					# 
   	 
					if (!defined $bytes_read) { 									# confirm read successful
						common::debug(0, "Failed to read from network socket, aborting.");
						exit(1);
					}
					elsif ($bytes_read == 0) { 
						common::debug(0, "Websocket connection terminated, aborting");
						exit(1);
					}
					else {
						$client->read($recv_data);								# read from websocket (blocking)
					}
				}
	
				if ($running == 2) {											# shutdown 
					if (scalar @packet > 0) {
						goto DELIVER;
					}
       				        common::debug(0, "\nBye!");									# buffer empty, time to die
					exit(0);
				}

				interval_timer();											# yak-yec timed events


																	########################################################
				while ($zmq_socket->has_pollin) {									# ZMQ
    
					my @zmq_parts = $zmq_socket->recv_multipart();							# get zmq broadcast
   	 
					if ( ($zmq_parts[0] eq 'rawtx') && ($config->{'librust'}) ) {						# raw transaction    

						my $txn = common::node_cli('decoderawtransaction', unpack("H*", $zmq_parts[1]), '');	# decode raw transaction using node RPC

						if (common::notify_check($packet::PKT_YEC_TRANSPARENT, \@notifications)) {		# check transparent notifications are enabled
						
							my @vout = @{$txn->{'vout'}};								# TRANSPARENT OUTPUTS
		
							if (scalar @vout > 0) {												# anything to send ?

								my @data = ( $txn->{'txid'} );										# txid is the first record
								foreach $op (@vout) {											# add outputs
									common::debug(0, "$op->{'scriptPubKey'}->{'addresses'}[0] : $op->{'valueZat'}");
									push @data, { value => $op->{'valueZat'}, address => $op->{'scriptPubKey'}->{'addresses'}[0] };
								}
								push @packet, packet::generate($packet::PKT_YEC_TRANSPARENT, \@data, $config->{'client_key'});		# add to buffer
							}
						}
	
						if (common::notify_check($packet::PKT_YEC_SHIELDED, \@notifications)) {

							my @vShieldedOutput = @{$txn->{'vShieldedOutput'}};					# SHIELDED OUTPUTS
	
							if (scalar @vShieldedOutput > 0) {
   		 
								my @data = ( $txn->{'txid'} );							# txid is the first record

								foreach my $vout (@{$txn->{'vShieldedOutput'}}) {				# loop through shielded outputs

									VIEWKEY: foreach my $xfvk ($config->{'xfvk'}, @viewkey) {			# loop through all viewkeys

										my $result = librust::decrypt_note($block->{'height'}, $xfvk, $vout->{'cmu'}, $vout->{'ephemeralKey'}, $vout->{'encCiphertext'});

										if ($result->{'status'} == 1) {						# decrypted !!! Wooooo!!!! 
		
											my $value = hex(unpack("H*", $result->{'value'}));		# convert value to yoshis
											my $memo  = unpack("A*", $result->{'memo'});			# convert memo to ascii
											$memo =~ s/\0//g;

											if ($xfvk eq $config->{'xfvk'}) {				# registration viewkey, so its ours

												if (my $newkey = common::memo_to_xfvk($result->{'memo'})) {						# viewkey found
												
													common::debug($config->{'debug'}, "REGISTRATION : " . librust::xfvk_to_addr($newkey) . " : " . $value);
													@viewkey = common::xfvk_monitor($newkey, $value, $block->{'height'}, $block->{'height'});	# add to monitoring
													push @data, pack("H*", aes256::keyRandom($packet::shielded_bytes * 2)); 			# dont leak privacy
												}
											}

											else {										# decrypted output for a monitored viewkey

												common::debug($config->{'debug'}, "SHIELDED TRANSACTION");
												push @data, aes256::encrypt( $xfvk, $result->{'value'} . $result->{'memo'});	
											}
											last VIEWKEY;        								# skip remaining viewkeys
										}
										else {
											push @data, pack("H*", aes256::keyRandom($packet::shielded_bytes * 2));		# fake output, dont leak privacy
										}
									}
								}
								push @packet, packet::generate( $packet::PKT_YEC_SHIELDED, \@data, $config->{'client_key'} );		# generate packets
							}
						}
					}

					elsif ($zmq_parts[0] eq 'hashblock') {								# NEW BLOCK

						$block = common::node_cli('getblock', unpack("H*", $zmq_parts[1]), 'abort');		# update block, abort on failure

						if (common::notify_check($packet::PKT_CONFIRMATION, \@notifications)) {			# CONFIRMATIONS

							my @data = ();									# 
							foreach my $txid (@{$block->{'tx'}}) {                                		#
								common::debug(0, "$txid");                     		       		#
								push @data, $txid;							#
							}										#
							common::debug(0, scalar @data . " txids confirmed\n");                         
							push @packet, packet::generate($packet::PKT_CONFIRMATION, \@data, $config->{'client_key'});
						}
	
						@viewkey = common::xfvk_active($block->{'height'});					# check viewkeys for expiry

						stratum::new_block();									# spool miner shares
						stratum::new_work();									# generate new work for miners
					}
				}
				stratum::update();											# process miner requests
			}
			usleep(100_100);												# short nap, don't beat up the server
		}
	}
}

common::debug("\nBye!");														# Bye ! Don't forget to write...
exit;


#######################################################################################################################################
#
# Gracefull shutdown
#
sub shutdown {

        my @announce = ( $config->{'nodename'}, $config->{'viewkeyfee'}, $config->{'addr'}, 0 );					# send announcement that we're offline

        push @packet, packet::generate($packet::PKT_BROADCAST, \@announce, $config->{'client_key'});					# add packet to buffer

	stratum::shutdown();														# shutdown stratum server

	$running = 2;															# set runtime flag to flush buffer & exit
}

#######################################################################################################################################
#
# Interval timer
#
sub interval_timer {
																
	if ( (time - $timer) >= $config->{'timer'}) {    										
	
		$timer = time + $config->{'timer'};

		my @announce = ( $config->{'nodename'}, $config->{'viewkeyfee'}, $config->{'addr'} );					# announce this node
		common::debug($config->{'debug'}, "checking node...");		

		if (common::node_cli('getblockchaininfo', '', '')) {
			push @announce, 1;
		}
		else {
			push @announce, 0;
		}
		push @packet, packet::generate($packet::PKT_BROADCAST, \@announce, $config->{'client_key'});	
	}
}

