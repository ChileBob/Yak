#!/usr/bin/perl

package equihash;

require "./blake2b.pm";

use warnings;
use strict;
#use blake2b;

use Data::Dumper;

# Source : https://git.hush.is/hush/hushwebminer/src/branch/master/pool-emu/equihash.pm



my $ycash_block = pack("H*", '0400000013708c76edf44beff50226ff113946c4b496fdcd39cf60805795a950600e0000795722553713bf3cde0930de05a6d4e818d2ec259f27f98338b4caad1f1e6e2d5d3fd5411c67638bd285c6f47f9ba25f62cd0961d2f1e293f8e987822b04bd57137e846053cf0e1e00000000000000000000000000000000000000000000000000000000930e9600fd9001000eae5963f5c1fbe8df89c311e733465b15b25ed66ba30bc71990536ddec96a6a443eccc101a0a3ab72cacf505de9d8daae3e54e4d4c2762a87deb6974e05eb034cfa397a3b57e7e3f2f04212d3a6e27d53d2273e678fa8259bc4d7ca5b60f371c5392f040571e63b18d1f4100e79aa20e6eec39c0ab0a721be7a432a4aa6c3aac29e1c30b0133a362605189373c44e2dbab9aedc3d07998cb059bc9e1b04130bd9736834d589f79df25a8afd2d204a8de9fd48bc932b20580c4804b5d9f25c9a8db452b9265e5c0c51986c424aa7deca1d29b3139bc93fcf656689c34b7a887815ca53fa8ad6a2bdc9f3511b7347d87ba2ca4cdd9b3d9d2f4115928136656531dd34fcab2416218d2e2d2b6df6cd13da3e221e25de21d09c72bac0bc333852caf2366b41ee3c2507a34b9b115ae0dab87e365983be2dd27240c3d6e5ea420fd4b5bbf6043854a8e53d9d1f7a1332a180e6ab299c940e1ac0495be215c915c05d79ef980fce01984f1891e01fd1cf66709e74c7ff450318ffff6bc0a4574e1ffbd46a03bb37d5baccd15528ef0baf66010400008085202f89010000000000000000000000000000000000000000000000000000000000000000ffffffff1403f6560e0fe4b883e5bda9e7a59ee4bb99e9b1bc5a08403102f0e76323000000001976a914756b4dac6b2bc8aba4c7d97c3ab218ea271a626088ac50d6dc01000000001976a914802cead45bc7e3f6a1b9d41bc9b283728ad491a988ac804a8f1e000000000000000000000000000000');



my $zcash_block = pack("H*", '04000000ca64633249dd59e97e4c57c199ce31e18e17fa6987ee6a5627b54a01000000006ecfcb1e0479fa0918be11725c2bfb4ce0f6cdc2d2da6f78f0b5a3074e5c6371f11f26758c1a415a8b4099e7a8293bd0d2874be50d4c2031d0098edf977cf1e97c7d8460ef0d021c0979df480000000000000000000000000000030000000000000000000005834ffd400500460940ab688dfdc9f213a3cdbb260b21d65b882e49f166e5571b6fe585e6c95aa569aa0adc819eef7f13c2220c522eae0bc7205251f64af0392792ff21e02f5e865111d7e3f8e2ab73325ff1175b18e03ae3a60c989db18ce91cb77ee541e2e24411d72d435d772932105d494be4405f8c63c8e5d0cf46dbd0035ebe9725922d215293d365b8a21467b8ad199a548ddeca2d323019a46da3a5d7377c347f22ba35922aca37cab908ee5c34ed08c62b80919768c3e025475a2f5cdd11576d661173639615fb8c079590c2b252c151fb90ff1003be2be712eee3caad54f0c6a818b1bb84353d04568aed20b32d83ff742de5da30b48d89f4097b109909dfeba87004e50ae8d135a31bd7680e7753ba54963f148f4ae79b47356a2bd8e0596f093eb5f4d7de000b766e86ea95af4b0dd653712fa43e8296b39c37fe19ded547d69110e8bec0e1eac65b77575a61dff7990130138ec18520caa575e4da4cc3a8e255601d423a051a9ca3b38df6cb2419861531c5f3b6fb11580d3a0b2d84aa375e4d4719c983664264db379ac9df0e3735dfce7aeb51c5cef0daf57cdc7a36121a92b9b2360857cfeea64f36851aaf80ce89d20ef5a42a1da8bd333f2d8005d6f87f5b4283638ee1f34e0ad31cd9091200b57c6c235627791565ccb1b3617a0d1fbc56131e7fe49d1ef7413be20f12cbce5ca03a87b737b6ce07563d7dbb9274c154d4d50b6739a089c32034fb064d4852e580d6dedb1d0beb00ba6eee5ee2b97ac2d80d402642ca88365b7ed256dff44c7575fcb9d1357719ab029631db88255c532701b36e5f3e61547687d717d1c7274892cdacfe8e23aa5466df9d9b5e2f6de35140ed3c60df129793df26af3feeb80e18057253d12fdcadea6059af1ff182b4de48ea7f65f1341773a23aaeb7421ee58b954dbcf6e5dfbac6f9fddb3123c200535175c18a6fab84a9604eed70a11ce28cd7f72c0c27564d1e9b2be0e3867540514a73c9ab7f943a9e01cd3021d289fc4eeba9212fa83cbde918c65c8cc523e42d21641b33f38e1592676bf0f76adeae1de75206d42e7ae21671ef82b2f2813c69ca7553fb9ae53c0ba868a2335a46dd3cd5681cc2dd8a1267211a420c10620f1860f083dda8a8521e4aa42ad5d08a3009de378dd5e77b5854f0f490a3b5c94c147cf42871c30904182cf207e97de95d479a1f787e0296b456578db124512546d1a47eadb9af955a6cc7f9572d1a9a12691143293271c6a68ab17842c2ae531be5c0e3d4baf760dc1387e5a6322956bd97ced8e3e2f21bd531e048049dd828ed0fd4d5e3197140cffc2555f557da12c3136bc2907d206ed7bfd86d11cbedab675162fe80590526b8a278ba5185fef8e1dc9cde01ac843739ad8126b054d5025a9307b9032365f6609c6a83069e71840064249b04c08535f0bdd2aa11213beec824daeb240ab18925af66de237ae734f294cf40c1752f35450c09bc3192c782fd9f202d75209ecfc6296ed9b67a9111d30e6764465e1189f152fe88538ca6dc2397321e04617c0b02afd90b86eb384e74554116168918e3e7084823e2c7dba1bb766188f087c7bd431d6c5d0eb52882ac5a28ddd2e9c327f338914fe8e9550ccf54ec3a75cbd74a903c4591d007dbcc60b5331c365e82a10114bc87ce580b7f7f3ca3442442d4e98c20fc9a8515300fe8a46efa658bb5047635a79215f50d36ac9403735fd3c106c71092b2a905f4fd660e66bb35b1af42dfc7c26e17d73d5bec1548f9faff7a7162f982e6024c5cf7d8827b4786a93447404cd239dfcad30a3e08b0f907098bc3978f26c16c86f0ec4543413510e304d8bae6dd043697a6148383ca293b21f4f6d6b7e206563dc5e75e4da95fd6c0ec9c0f626ce2fbd975ee020400008085202f89010000000000000000000000000000000000000000000000000000000000000000ffffffff20039db71200324d696e6572732068747470733a2f2f326d696e6572732e636f6dffffffff045861e70e000000001976a914dcb4eb5436bcc1351ced1259289466134e993d5388ac38c94d010000000017a914d28badc8c685c5c6ec386e1202835488deee713487286bee000000000017a914d45cb1adffb5215a42720532a076f02c7c778c908740787d010000000017a914931fec54c1fea86e574462cc32013f5400b8912987000000000000000000000000000000000000000400008085202f8901d36811870e8ea0feaf373585d429c36906089afdaf8004f2c26150b77810a3a901000000fdfd000048304502210080c8005c2a14a7d11fe48d8e69d2b37464cea8af1b42d1a713c8c9eee8ce06520220213fc01fd687875b11fc958e578066acefa995a1e0c2897c78a024ff449e8760014730440220339acbf301e12916533d9099118a9d1453a775293f0fa3f458ad44a635e67e9d02204f5a33536b8e0d3a9e0c4b658c9d1a46296d225f734117bea2ed27d244482e87014c69522103b69c492816516f70afca2d2a899ad67426dc7aab05f213db0c030d392d34b6f0210201efa192c6166fb43fad8915a9777efdbe05a7611bae3ffbbad7d5ac4030d43821022bf908d11b3c7cf39dece685e8adef557b3250a4a2883efa122cd48168b6b9ec53aeffffffff029d0a35020000000017a914d22f7ba2e717bcb6af39baf0d844b082275f7c21874be5b003000000001976a914d4864e21fbcb8e7b8d6fa99b86cad05e8ddff90888ac9bb71200000000000000000000000000000000');

if (verify($zcash_block, 200, 9)) {
	print "zcash: valid!\n";
}

if (verify($ycash_block, 192, 7)) {
	print "ycash: valid!\n";
}

exit;

sub verify {

	my ($block, $N, $K) = @_;

	my $bpi = ($N / ($K + 1)) + 1;			# bits per index	200/9 = 21       192/7 = 25
	my $indexes = 2**$K;				# number of indexes	200/9 = 512      192/7 = 128
	my $hashlen = $N / 4;				# blake2b hash length	200/9 = 50       192/7 = 48
	my $solsize = ($bpi * $indexes) / 8;		# solution size		200/9 = 1344, 192/7 = 400

	my ($hdr, $compactsolsize, $sol) = unpack "a140 a3 a$solsize", $block;			# extract block header, solution compact size & solution

	my @sol = map { oct "0b$_" } unpack "(a$bpi)*", unpack 'B*', $sol;			# extract indexes from solution
	@sol == $indexes or return(0);
									
	my %uniq; 										# check indexes are unique
	@uniq{@sol} = (); 
	keys %uniq == $indexes or return(0);

	for my $step (1..$K) {									# check indexes are ordered
		my $off = 2**($step-1);
		$sol[$_] < $sol[$_+$off] or return(0)
		for map $_*$off*2, 0 .. 2**($K-$step)-1;
	}

	my $blake = blake2b::new (								# setup blake2b 
		hashlen  => $hashlen,
		personal => ('ZcashPoW' . pack 'VV', $N, $K),	
	)->update ($hdr);

	@sol = map {										# get blake hashes
		my $bl = $blake->copy ()->final (pack 'V', $_ / 2);
		length $bl == $hashlen or return(0);
		substr $bl, $_ % 2 * ($hashlen/2), ($hashlen/2)	
	} @sol;

	for my $step (1..$K) {									# XOR blake hashes
		@sol = map $sol[$_*2] ^ $sol[$_*2+1], 0 .. @sol/2 - 1;
		unpack ('B' . $step * 20, $_) =~ /^0+\z/ or return(0) for @sol;
	}
	@sol == 1 or return(0);

	# final xor is all zeroes
	if ( hex(unpack("H*", $sol[0])) == 0) {							# if final XOR is all zeros, its valid!
		return(1);
	}
}

1;

