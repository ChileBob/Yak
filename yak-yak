#!/usr/bin/perl
#
# yak-yak : websocket server 
#
# MIT License (ChileBob)
#
# Zcash : zs1a7qnkg8hr74ujj08jhjcdfs7s62yathqlyn5vd2e8ww96ln28m3t2jkxun5fp7hxjntcg8ccuvs
# Ycash : ys17fsj64ydl93net807xr00ujz2lnrf22cjf4430vvz69vpaat8t3hrdjmkvj7thrw4fdaz7l0pns

my $config = {										
	key   => 'changethiskey',								# yak-yak admin key, commands must be encrypted with this
	limit => 100,										# max number of posts per tick interval 
	port  =>  8834,										# listening port number
	tick  =>  10,										# tick interval (seconds)
	tracker => 100										# packet tracker (hash of packets))
};

# #################################################################################################################################
#
# CHANGING ANYTHING BELOW THIS LINE IS A BAD IDEA
#
# #################################################################################################################################

use utf8;
use Data::Dumper;										# debugging

use Net::WebSocket::Server;									# websocket server
use Convert::Base64;										# base64 encode/decode
use Digest::SHA qw(sha256);

use Cwd qw(abs_path);										# get install/working directory
use File::Basename;

our $install = dirname(abs_path($0));								# get install dir at runtime

require "$install/modules/common.pm";								# yak perl modules
require "$install/modules/aes256.pm";		
require "$install/modules/packet.pm";

my @pkt_hash;											# sha256 hashes of packets (prevents duplicates)
my $client;											# connected clients

my @client_key = ( $config->{'key'} );								# load our key
push @client_key, common::keys_load('yak-yak.keys');						# append client keys

my @blocked = common::keys_load('yak-yak.blocked');						# load blocked ip list

$SIG{INT} = \&server_shutdown;									# graceful shutdown (not implemented)

Net::WebSocket::Server->new(									# setup websocket server

	listen => $config->{'port'},								# network port number we listen to

	tick_period => $config->{'tick'},							# seconds between timestamp/tick events (5 seconds or less)

	on_tick => sub {									# timed event handler

		my ($serv, $conn) = @_;

		foreach my $dest ($serv->connections) {						# loop through all connections

			if ( $client->{$dest}->{'rate'} > $config->{'limit'} ) {
				print "$client->{$dest}->{'type'} : Rate limit exceeded ($client->{$dest}->{'rate'})\n";
				$serv->disconnect($dest->{'socket'})
			}
			else {
				if ($client->{$dest}->{'type'} && $client->{$dest}->{'rate'} > 0) {	# show number of packets received from each client
					print "$client->{$dest}->{'type'} : $client->{$dest}->{'rate'}\n";
				}
				$client->{$dest}->{'rate'} = 0;
			}
		}
	},

	on_connect => sub {									# connection handler

		my ($serv, $conn) = @_;

		$conn->on(

			handshake => sub {							# new connection
			
				my ($conn, $handshake) = @_;
				$client->{$conn}->{'rate'} = 0;					# initialise rate limiter
				$client->{$conn}->{'ip'} = $conn->ip();				# remember where they connected from

												# TODO : Check blocked list & do something nasty if needed
			},

			disconnect => sub {
				if ($client->{$conn}->{'type'}) {
					print "$client->{$conn}->{'type'} : Disconnected\n";
				}
				delete $client->{$conn};
			},

			binary => sub {								# binary data

				my ($conn, $msg) = @_;

				pkt_buffer($conn, $msg, 'BINARY');				# broadcast
			},

			utf8 => sub {								# client sent text/base64 data

				my ($conn, $msg) = @_;

				if ( $msg =~ m/^BINARY/ || $msg =~ m/^BASE64/) {			# subscription
					
					($client->{$conn}->{'transport'}, $client->{$conn}->{'type'}) = split(':', $msg);
					$conn->send_utf8("HELLO");					# say hi
					print "$client->{$conn}->{'type'} : $client->{$conn}->{'ip'} : Connected\n";
				}

				elsif ( $msg =~ m/^ADMIN/ ) {						# admin command

					my $rx = aes256::decrypt($config->{'key'}, decode_base64(substr($msg, 5)));

					print "ADMIN: $rx\n";

					if ($rx) {
						$rx =~ s/\s+/ /g;
						my @command = split(" ", $rx);

						$command[0] = lc($command[0]);				# commands are alway lowercase

						print "Remote Command: $command[0] $command[1]\n";

						if ($command[0] eq 'addkey') {				# add client encryption key
							push @client_key, $command[1];
							common::keys_save(\@client_key, 'yak-yak.keys');	
						}
						elsif ($command[0] eq 'delkey') {			# remove client encryption key
							my @filtered;
							foreach my $key (@client_key) {
								if ($key ne $command[1]) {
									push @filtered, $key;
								}
							}
							@client_key = @filtered;
						}
						elsif ($command[0] eq 'ban') {				# add ip address to blocked list
							push @blocked, $command[1];
							common::keys_save(\@blocked, 'yak-yak.blocked');
						}
						elsif ($command[0] eq 'unban') {			# remove ip address from blocked list
							my @filtered;
							foreach my $key (@blocked) {
								if ($key ne $command[1]) {
									push @filtered, $key;
								}
							}
							@blocked = @filtered;
						}
						elsif ($command[0] eq 'shutdown') {			# shutdown, right now
							server_shutdown();
						}
						elsif ($command[0] eq 'limit') {			# adjust rate limiter
							$config->{'limit'} = $command[1];
						}
						elsif ($command[0] eq 'tracker') {			# adjust tracker buffer size
							$config->{'tracher'} = $command[1];
						}
					}
					$conn->disconnect();						# disconnect client
				}

				else {									# BASE64 data

					pkt_buffer($conn, $msg, 'BASE64');				# broadcast

				}
			},
		);
	},
)->start;

print("Bye!/n");
exit(0); 		



#############################################################################################################################################################################
#
# shutdown server
#
sub server_shutdown {

	print "\nShutting down...\n";

	common::keys_save(\@client_key, 'yak-yak.keys');				# client keys
	common::keys_save(\@blocked, 'yak-yak.blocked');				# banned ip list 

	print("Bye!\n");
	exit(0);
}


#############################################################################################################################################################################
#
# add packet to buffer
#
sub pkt_buffer {	

	my ($conn, $raw, $transport) = @_;

	$client->{$conn}->{'rate'}++;							# client rate limiter

	if ($transport eq 'BASE64') {							# convert from BASE64 if needed
		$conn->send_utf8('OK');							# ack
	}
	elsif ($transport eq 'BINARY') {						# default is BINARY
		$conn->send_binary(pack("A*", "OK"));					# ack
	}

	my $packet = packet::parse($raw, \@client_key, $transport );			# parse what we received

	if ($packet->{'type'} == $packet::PKT_ENCRYPTED_BCAST) {			# was an encrypted broadcast we could read

		$pkt = packet::parse($packet->{'plaintext'});				# parse the plaintext

		if ($pkt->{'type'} < $packet::PKT_BROADCAST) {				# rate limit non-priviledged packets

			# TODO: Rate limit traffic from this client
			
			my $hash = sha256($packet->{'plaintext'});			# hash the packet
	
			if (!grep $_ eq $hash, @pkt_hash) {				# check for duplicates
				push @pkt_hash, $hash;
		
				if (scalar @pkt_hash > $config->{'tracker'}) {		# control tracker size
					shift @pkt_hash;
				}
				broadcast ($conn, $packet->{'plaintext'});	
			}
		}
		else {									# notification, no rate or duplicate limits
			broadcast ($conn, $packet->{'plaintext'});
		}
	}	
}


#############################################################################################################################################################################
#
# broadacast packet
#
sub broadcast {

	my ($conn, $pkt_binary) = @_;					# connections, binary data, base64 data

	my $pkt_base64 = encode_base64($pkt_binary);			# generate base64 

	foreach my $dest ($conn->server->connections) {			# loop through all connections

		if ($conn != $dest) {					# dont send to originating client
			if ($client->{$dest}->{'transport'} eq 'BASE64') {		# - send as base64
				$dest->send_utf8($pkt_base64);
			}
			elsif ($client->{$dest}->{'transport'} eq 'BINARY') {	# - send as binary
				$dest->send_binary($pkt_binary);
			}
		}
	}
}

