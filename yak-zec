#!/usr/bin/perl
#
# yak-zec : node client for zcash
#
# MIT License (ChileBob)
#
# Zcash : zs1a7qnkg8hr74ujj08jhjcdfs7s62yathqlyn5vd2e8ww96ln28m3t2jkxun5fp7hxjntcg8ccuvs
# Ycash : ys17fsj64ydl93net807xr00ujz2lnrf22cjf4430vvz69vpaat8t3hrdjmkvj7thrw4fdaz7l0pns

#########################################################################################################################################################################
#
# HEALTH WARNING ! Running ZMQ on a fullnode has security implications !! Make sure you understand them !!!
#
#########################################################################################################################################################################

my $config = {																# DEFAULT CONFIGURATION

	nodename => 'ChileBob (ZCASH)',													# name/message for announcements
	client_type => 'yak-zec',													# type of client, yak-yak needs to know
	client_key => 'changethiskey',													# yak-yak encryption key, required to submit notifications
	zmq => 'tcp://127.0.0.1:28232',													# fullnode zmq
	web => 'ws://127.0.0.1:8834',													# websocket server
	timer => 60,															# timer interval
	fee => 1,															# viewkey monitoring fee (zats per block)
	debug => 5,															# debugging output level
	node_client => 'zcash-cli',													# fullnode client binary
	librust => './rust/zcash/target/debug/librustzcash.so',										# path to librustzcash.so (dynamic library built from librustzcash)
};

#########################################################################################################################################################################
#
# CHANGING ANYTHING BELOW THIS LINE IS A REALLY BAD IDEA !! IF YOU BREAK IT, YOU GET TO KEEP THE PEICES
#
#########################################################################################################################################################################

use Data::Dumper;															# debugging

use ZMQ::FFI qw(ZMQ_SUB);														# ZMQ connection to fullnode
use Time::HiRes q(usleep);														# ZMQ polling interval timer
use Math::BigInt;															# at some point we need to handle 256-bit ints
use IO::Socket::INET;															# general purpose networking
use Protocol::WebSocket::Client;													# websocket client
use FFI::Platypus;															# FFI interface to librustzcash
use FFI::Platypus::Buffer qw( scalar_to_buffer);											# 
use FFI::Platypus::Memory qw( malloc memcpy free);											# 

use Cwd qw(abs_path);															# get install/working directory
use File::Basename;
our $install = dirname(abs_path($0));			

require "$install/modules/common.pm";													# common subs
require "$install/modules/bech32.pm";													# bech32 encode/decode 
require "$install/modules/aes256.pm";													# AES256 encrypt/decrypt
require "$install/modules/packet.pm";													# yak packet generation/parsing

my @notifications = ($packet::PKT_ZEC_SHIELDED, $packet::PKT_CONFIRMATION, $packet::PKT_ZEC_TRANSPARENT);				# packet types we deliver, remove from array to disable

$config = common::parse_argv($config, \@ARGV);												# modify config from command line args

our $key = $config->{'client_key'};													# yak-yak encryption key, shared with other modules

$SIG{INT} = \&shutdown;															# gracefull shutdown

my $running = 1;															# run flag
my @packet;

our $monitored;																# hash of monitored viewkeys
our @viewkey;																# client keys with active monitoring

my $timer = time;															# interval timer 

my $ffi = FFI::Platypus->new( api => 1);												# FFI
$ffi->lib( $config->{'librust'} );													# load library

$ffi->attach( 'librustzcash_xfvk_decrypt_note'  => [ 'int', 'string', 'string', 'string', 'string', 'opaque', 'opaque' ] => 'int');	# decrypt note with xfvk 
$ffi->attach( 'librustzcash_zip32_xfvk_address' => [ 'string', 'string', 'opaque', 'opaque'  ] => 'int');				# derive address from xfvk
$ffi->attach( 'librustzcash_crh_ivk'		=> [ 'string', 'string', 'opaque' ] => 'void');						# derive ivk from ak & nk

my @keys = common::keys_load('yak-zec.keys');												# load our viewkeys, first key is for registration
$config->{'xfvk'} = common::xfvk_check($keys[0]);											# check registration viewkey is valid

if ($config->{'xfvk'}) {	
	$config->{'addr'} = xfvk_to_addr($config->{'xfvk'});										# derive address from xfvk
}
else {																	# MUST have a valid registration viewkey
	print("Registration viewkey is NOT VALID ! Aborting\n");
	exit(1);
}
$monitored->{$config->{'xfvk'}}->{'expiry'} = -1;											# registration viewkey never expires

common::debug($config->{'debug'}, "ZMQ: $config->{'zmq'}");
common::debug($config->{'debug'}, "WEB: $config->{'web'}");
common::debug($config->{'debug'}, "REG: $config->{'addr'}");
																	# ZMQ CLIENT
my $info  = node_cli('getblockchaininfo', '', 'abort');											# current chain info, abort if node is down

common::debug(0, "Checking node sync...");							
while ( ($info->{'blocks'} != $info->{'headers'}) && !$info->{'initial_block_download_complete'}) {					# delay until node is synced
	sleep(30);
	$info  = node_cli('getblockchaininfo', '', 'abort');				
}
my $block = node_cli('getblock', $info->{'bestblockhash'}, 'abort');									# last block, abort if node is down

# TODO: Delay here if the node is not fully synced

my $ctx = ZMQ::FFI->new();														# ZMQ CONNECTION
my $zmq_socket = $ctx->socket(ZMQ_SUB);													# 
$zmq_socket->connect($config->{'zmq'});													# 
$zmq_socket->subscribe('');							 

my $txn_reg = node_cli("z_listreceivedbyaddress $config->{'addr'}");									# CLIENT VIEWKEY REGISTRATION
if (!$txn_reg) {
	common::debug(0, "The registration zaddr (or viewkey) is not in the node wallet!! Aborting!!");
	exit(1);
}

foreach my $txn ( @{$txn_reg} ) {													# loop through transactions to registration address

	if (my $xfvk = common::memo_to_xfvk($txn->{'memo'})) {										# search memo for viewkey
		@viewkey = common::xfvk_monitor($xfvk, $txn->{'amountZat'}, $txn->{'blockheight'}, $block->{'height'});			# 
	}
}
print "Loaded " . scalar @viewkey . " viewkeys\n";

my ($web_type, $web_ip, $web_port) = common::uri_split($config->{'web'});								# 

while ($running >= 0) {

	my $tcp_socket = IO::Socket::INET->new(												# connect to websocket server
		PeerAddr => $web_ip,													#
		PeerPort => $web_port,													#
		Proto => 'tcp',														#
		Blocking => 1														# blocking socket, but we dont care
	);

	if (!$tcp_socket) {														# confirm connection
		my $delay = int rand(5) + 5;
		common::debug ($config->{'debug'}, "WEB: $config->{'web'} : Failed to reconnect!! Trying again in $delay seconds");
	       	sleep($delay);	
	}
	else {
		if ($running == 0) { 													# reconnected
			common::debug(0, "Reconnected");
			$running = 1;
		}
																	# start websocket client
		my $client = Protocol::WebSocket::Client->new(url => "$config->{'web'}");

		$client->on(														# websocket connect method
			connect => sub {
				my $client = shift;
				sleep(2);
			}
		);

		$client->on(
			write => sub {													# websocket write method
				my $client = shift;
				my ($buf) = @_;
				syswrite $tcp_socket, $buf;
			}
		);

		$client->on(														# websocket read method
			read => sub {
				my $client = shift;
				my ($buf) = @_;

				if ($buf =~ m/^HELLO/) {										# receive server welcome message
					common::debug($config->{'debug'}, "Connected!");
				}
				else {
					if ($buf ne 'OK') {										# ignore server acknowledgements
# TODO : Could watch for requests here
#						print "$buf\n";
					}
				}
			}
		);

		$client->connect;													# start websocket client

		$client->write("BASE64:$config->{'client_type'}");									# subscribe for BASE64 transport & sed client type

		while ($running) {
	
			if ($tcp_socket) {												# confirm connection is up

			DELIVER: if (scalar @packet > 0) {										# send oldest packet
		
					$client->write($packet[0]);
					@packet = splice(@packet, 1);

					usleep 100_00;											# short nap, be nice to the server
		
					my $recv_data;											# read from websocket
					my $bytes_read = sysread $tcp_socket, $recv_data, 16384;					# confirm read successful
			
					if (!defined $bytes_read) { 
						common::debug(0, "Failed to read from network socket, aborting.");
						exit(1);
					}
					elsif ($bytes_read == 0) { 
						common::debug(0, "Websocket connection terminated");
						exit(1);
					}
					$client->read($recv_data);									# process it
				}
		
				if ($running == 2) {											# shutdown gracefully
					if (scalar @packet > 0) {
						goto DELIVER;
					}
					common::debug(0, "Bye!");
					exit(0);
				}


				interval_timer();											# interval timer

																	#####################################################
				while ($zmq_socket->has_pollin) {									# ZMQ
			
					my @zmq_parts = $zmq_socket->recv_multipart();							# read zmq
			
					if ($zmq_parts[0] eq 'rawtx') {									# raw transaction	
				
						my $txn = node_cli('decoderawtransaction', unpack("H*", $zmq_parts[1]), '');		# decode raw transaction using node RPC

						if (common::notify_check($pacekt::PKT_ZEC_TRANSPARENT, \@notifications)) {		# check transparent notifications are enbled
			
							my @vout = @{$txn->{'vout'}};								# TRANSPARENT OUTPUTS

							if (scalar @vout > 0) {
								my @data = ( $txn->{'txid'} );							# txid is the first record
								foreach $op (@vout) {										# add output details
									common::debug(0, "$op->{'scriptPubKey'}->{'addresses'}[0] : $op->{'valueZat'}");
									push @data, { value => $op->{'valueZat'}, address => $op->{'scriptPubKey'}->{'addresses'}[0] };
								}
								common::debug(0, scalar @vout . " outputs\n");
								push @packet, packet::generate($packet::PKT_ZEC_TRANSPARENT, \@data, $config->{'client_key'});	# add packet(s) to buffer
							}
						}
			
						if (common::notify_check($pacekt::PKT_ZEC_SHIELDED, \@notifications)) {			# check if shielded notifications are enabled

							my @vShieldedOutput = @{$txn->{'vShieldedOutput'}};					# SHIELDED OUTPUTS
		
							if (scalar @vShieldedOutput > 0) {
			
								my @data = ( $txn->{'txid'} );							# txid is the first record
			
								OUTPUT: foreach my $vout (@{$txn->{'vShieldedOutput'}}) {			# loop through all shielded outputs
					
									VIEWKEY: foreach my $xfvk ($config->{'xfvk'}, @viewkey) {		# loop through all viewkeys
					
										my $result = decrypt_note ($block->{'height'}, $xfvk, $vout->{'cmu'}, $vout->{'ephemeralKey'}, $vout->{'encCiphertext'});
		
										if ($result->{'status'} == 1) {					# decrypted !!! Wooooo!!!! 
					
											my $value = hex(unpack("H*", $result->{'value'}));	# convert value from 8-bytes into something more useful
											my $memo  = unpack("A*", $result->{'memo'});		# convert memo to ascii & strip null padding
											$memo =~ s/\0//g;
						
											if ($xfvk eq $config->{'xfvk'}) {			# registration viewkey, so its ours
										
												if (my $newkey = common::memo_to_xfvk($result->{'memo'})) {						# viewkey found

													common::debug($config->{'debug'}, "REGISTRATION : " . xfvk_to_addr($line) . " : " . $value);	
													@viewkey = common::xfvk_monitor($newkey, $value, $block->{'height'}, $block->{'height'});	# add to monitoring
													push @data, pack("H*", aes256::keyRandom($packet::shielded_bytes * 2));				# dont leak privacy
												}
											}
			
											else {							# woo!! we decrypted an output for a monitored viewkey
												common::debug($config->{'debug'}, "******* SHIELDED TRANSACTION ****** : $value : $memo");
												push @data, aes256::encrypt($xfvk, $result->{'value'} . $result->{'memo'});
											}
			
										last VIEWKEY;		
										}
										push @data, pack("H*", aes256::keyRandom($packet::shielded_bytes * 2)); 	# fake output, dont leak privacy
									}
								}
							}
							push @packet, packet::generate( $packet::PKT_ZEC_SHIELDED, \@data, $config->{'client_key'} );		# generate packets
						}
					}
				
					elsif ($zmq_parts[0] eq 'hashblock') {								# NEW BLOCK
							
						$block = node_cli('getblock', unpack("H*", $zmq_parts[1]), 'abort');			# update block, abort on failure
		
						if (common::notify_check($packet::PKT_CONFIRMATION, \@notifications)) {			# CONFIRMATIONS

							my @data = ();							
							foreach my $txid (@{$block->{'tx'}}) {								
								common::debug(0, "$txid");							
								push @data, $txid;
							}
							common::debug(0, scalar @data . " txids confirmed\n");							
							push @packet, packet::generate($packet::PKT_CONFIRMATION, \@data, $config->{'client_key'});	# add packets to buffer
						}
					
						@viewkey = common::xfvk_active($block->{'height'});					# check viewkeys for expiry
					}
				}
		
				if (scalar @packet == 0) {										# still nothing to do ? have a longer nap
					sleep(1);
				}
			}
		}
	}
}

common::debug(0, "\nBye!");														# Bye ! See ya !! Don't forget your hat

exit;


#############################################################################################################################################################################
#
# interval timer
#
sub interval_timer {

	if ( (time - $timer) >= $config->{'timer'}) {	
		
		$timer = time + $config->{'timer'};											# reset interval timer

		my @announce = ( $config->{'nodename'}, $config->{'fee'}, $config->{'addr'} );						# announce this node
		common::debug($config->{'debug'}, "checking node...");									# append status

		if (node_cli('getblockchaininfo', '', '')) {
			push @announce, 1;
		}
		else {
			push @announce, 0;
		}
		push @packet, packet::generate($packet::PKT_BROADCAST, \@announce, $config->{'client_key'});				# add packet to buffer
	}
}
		

#############################################################################################################################################################################
#
# query node client, return JSON 
#
sub node_cli {

	use JSON;

	my ($command, $data, $failure) = @_;

	my $response = `$config->{'node_client'} $command $data 2>/dev/null`;								# every time you use backticks a puppy dies :-(

	if (eval { decode_json($response) } ) {												# invalid JSON kills puppies too
		return(decode_json($response));
	}
	else {																# bad response
		if ($failure eq 'abort') {												# 'abort' flag means we shutdown now
			print("Node is down, aborting\n");
			exit(1);
		}
	}
}


#############################################################################################################################################################################
#
# Gracefull shutdown
#
sub shutdown {

	my $announce - ( $config->{'nodename'}, $config->{'fee'}, $config->{'addr'}, 0 );						# send announcement that we're offline

	push @packet, packet::generate($packet::PKT_BROADCAST, \@announce, $config->{'client_key'});					# add packet to buffer

	$running = 2;															# set runtime flag to exiting
}

#############################################################################################################################################################################
#
# LIBRUSTZCASH : subs that summon librustzcash functions, its where the magic happens
#
#############################################################################################################################################################################

# Derive incoming viewkey from extended full viewkey
#
# TODO: IVK support ?
#
sub xfvk_to_ivk {

	my ($xfvk_str) = @_;

	$xfvk_str = common::xfvk_check($xfvk_str);											# check length & prefix
	if (!$xfvk_str) {
		return(0);
	}

	my $xfvk = bech32::decode($xfvk_str);												# extended full viewkey (285 chars)
	my $ak = substr($xfvk, 0,  32);													# ak 
	my $nk = substr($xfvk, 32, 32);													# nk 
	my $ovk = substr($xfvk, 64, 32);												# output view key
	# dk																# diversifier key
	# c																# chain code

	my $ivk_ret = pack("c32", 0);													# allocate memory for response
	my ($ivk_ptr, $ivk_size) = scalar_to_buffer $ivk_ret;

	librustzcash_crh_ivk ($ak, $nk, $ivk_ptr);											# where the magic happens

	return($ivk_ret);														# return ivk as binary
}


#######################################################################################################################################
#
# Derive payment address from extended full viewkey 
#
sub xfvk_to_addr {

	my ($xfvk_str) = @_;														# bech32 encoded extended full viewkey

	$xfvk_str = common::xfvk_check($xfvk_str);											# check length & prefix
	if (!$xfvk_str) {
		return(0);
	}
	else {

		my $xfvk = bech32::decode($xfvk_str);											# full viewkey (285 chars)

		my $j = pack("c11", 0);													# diversifier (11 bytes);

		my $j_ret = pack("c11", 0);												# RETURNED diversifier
		my ($j_ptr, $j_size) = scalar_to_buffer $j_ret;		

		my $addr_ret = pack("c43", 0);												# RETURNED address
		my ($addr_ptr, $addr_size) = scalar_to_buffer $addr_ret;

		librustzcash_zip32_xfvk_address( $xfvk, $j, $j_ptr, $addr_ptr);								# more magic

		return(bech32::encode('zs', $addr_ret));										# return as bech32 encoded string
	}
}


#######################################################################################################################################
#
# Attempt to decode a sapling transaction 
#
sub decrypt_note {

	my ($height, $xfvk, $cmu, $epk, $enc_ciphertext) = @_;										# height (int), hex-encoded strings (all other vars)

	$xfvk = common::xfvk_check($xfvk);												# check viewkey for length & prefix
	if (!$xfvk) {
		return(0);
	}

	my $value_ret = pack("c8", 0);													# allocate memory for returned values
	my ($value_ptr, $value_size) = scalar_to_buffer $value_ret;
								   
	my $memo_ret = pack("c512", 0); 
	my ($memo_ptr, $memo_size) = scalar_to_buffer $memo_ret;	

	my $result = librustzcash_xfvk_decrypt_note(											# more magic

		$height,														# (u32)		block height
		pack("A285", $xfvk),													# (285-bytes)	full viewkey
		pack("H64", $cmu),													# (32-bytes)	commitment u-coordinate	
		pack("H64", $epk),													# (32-bytes)	ephemeral key	
		pack("H1160", $enc_ciphertext),												# (580-bytes)	encrypted 

		$value_ptr,														# (8-bytes)	value (u64)
		$memo_ptr														# (512-bytes)	memo (null padded)
	);

	return( {status => $result, addr => $addr_ret, value => $value_ret, memo => $memo_ret} );
}


